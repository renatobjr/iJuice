// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v3.20.3
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "order";

export interface UserRequest {
  id: string;
  email: string;
}

export interface Product {
  name: string;
  has_ice: boolean;
  has_sugar: boolean;
}

export interface OrderResponse {
  id: string;
  customer_id: string;
  vendor_id: string;
  host: string;
  quantity: number;
  products: Product[];
  total_value: string;
  withdraw_day: string;
  withdraw_time: string;
  status: string;
  withdraw_code: string;
}

export interface OrderCreateRequest {
  customer_id: number;
  vendor_id: string;
  host: string;
  quantity: number;
  products: Product[];
  total_value: string;
  withdraw_day: string;
  withdraw_time: string;
}

export interface OrderCreateResponse {
  status: boolean;
  message: string;
}

export interface OrderListRequest {
  customer_id: string;
}

export interface OrderListResponse {
  orders: OrderResponse[];
}

function createBaseUserRequest(): UserRequest {
  return { id: "", email: "" };
}

export const UserRequest = {
  encode(message: UserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseProduct(): Product {
  return { name: "", has_ice: false, has_sugar: false };
}

export const Product = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.has_ice !== false) {
      writer.uint32(16).bool(message.has_ice);
    }
    if (message.has_sugar !== false) {
      writer.uint32(24).bool(message.has_sugar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.has_ice = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.has_sugar = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      has_ice: isSet(object.has_ice) ? globalThis.Boolean(object.has_ice) : false,
      has_sugar: isSet(object.has_sugar) ? globalThis.Boolean(object.has_sugar) : false,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.has_ice !== false) {
      obj.has_ice = message.has_ice;
    }
    if (message.has_sugar !== false) {
      obj.has_sugar = message.has_sugar;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.name = object.name ?? "";
    message.has_ice = object.has_ice ?? false;
    message.has_sugar = object.has_sugar ?? false;
    return message;
  },
};

function createBaseOrderResponse(): OrderResponse {
  return {
    id: "",
    customer_id: "",
    vendor_id: "",
    host: "",
    quantity: 0,
    products: [],
    total_value: "",
    withdraw_day: "",
    withdraw_time: "",
    status: "",
    withdraw_code: "",
  };
}

export const OrderResponse = {
  encode(message: OrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.customer_id !== "") {
      writer.uint32(18).string(message.customer_id);
    }
    if (message.vendor_id !== "") {
      writer.uint32(26).string(message.vendor_id);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.quantity !== 0) {
      writer.uint32(40).int32(message.quantity);
    }
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.total_value !== "") {
      writer.uint32(58).string(message.total_value);
    }
    if (message.withdraw_day !== "") {
      writer.uint32(66).string(message.withdraw_day);
    }
    if (message.withdraw_time !== "") {
      writer.uint32(74).string(message.withdraw_time);
    }
    if (message.status !== "") {
      writer.uint32(82).string(message.status);
    }
    if (message.withdraw_code !== "") {
      writer.uint32(90).string(message.withdraw_code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customer_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vendor_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.total_value = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.withdraw_day = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.withdraw_time = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.withdraw_code = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      customer_id: isSet(object.customer_id) ? globalThis.String(object.customer_id) : "",
      vendor_id: isSet(object.vendor_id) ? globalThis.String(object.vendor_id) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      total_value: isSet(object.total_value) ? globalThis.String(object.total_value) : "",
      withdraw_day: isSet(object.withdraw_day) ? globalThis.String(object.withdraw_day) : "",
      withdraw_time: isSet(object.withdraw_time) ? globalThis.String(object.withdraw_time) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      withdraw_code: isSet(object.withdraw_code) ? globalThis.String(object.withdraw_code) : "",
    };
  },

  toJSON(message: OrderResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.customer_id !== "") {
      obj.customer_id = message.customer_id;
    }
    if (message.vendor_id !== "") {
      obj.vendor_id = message.vendor_id;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.total_value !== "") {
      obj.total_value = message.total_value;
    }
    if (message.withdraw_day !== "") {
      obj.withdraw_day = message.withdraw_day;
    }
    if (message.withdraw_time !== "") {
      obj.withdraw_time = message.withdraw_time;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.withdraw_code !== "") {
      obj.withdraw_code = message.withdraw_code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderResponse>, I>>(base?: I): OrderResponse {
    return OrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderResponse>, I>>(object: I): OrderResponse {
    const message = createBaseOrderResponse();
    message.id = object.id ?? "";
    message.customer_id = object.customer_id ?? "";
    message.vendor_id = object.vendor_id ?? "";
    message.host = object.host ?? "";
    message.quantity = object.quantity ?? 0;
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.total_value = object.total_value ?? "";
    message.withdraw_day = object.withdraw_day ?? "";
    message.withdraw_time = object.withdraw_time ?? "";
    message.status = object.status ?? "";
    message.withdraw_code = object.withdraw_code ?? "";
    return message;
  },
};

function createBaseOrderCreateRequest(): OrderCreateRequest {
  return {
    customer_id: 0,
    vendor_id: "",
    host: "",
    quantity: 0,
    products: [],
    total_value: "",
    withdraw_day: "",
    withdraw_time: "",
  };
}

export const OrderCreateRequest = {
  encode(message: OrderCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer_id !== 0) {
      writer.uint32(8).int32(message.customer_id);
    }
    if (message.vendor_id !== "") {
      writer.uint32(18).string(message.vendor_id);
    }
    if (message.host !== "") {
      writer.uint32(26).string(message.host);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.total_value !== "") {
      writer.uint32(50).string(message.total_value);
    }
    if (message.withdraw_day !== "") {
      writer.uint32(58).string(message.withdraw_day);
    }
    if (message.withdraw_time !== "") {
      writer.uint32(66).string(message.withdraw_time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.customer_id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vendor_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.host = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.total_value = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.withdraw_day = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.withdraw_time = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateRequest {
    return {
      customer_id: isSet(object.customer_id) ? globalThis.Number(object.customer_id) : 0,
      vendor_id: isSet(object.vendor_id) ? globalThis.String(object.vendor_id) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      total_value: isSet(object.total_value) ? globalThis.String(object.total_value) : "",
      withdraw_day: isSet(object.withdraw_day) ? globalThis.String(object.withdraw_day) : "",
      withdraw_time: isSet(object.withdraw_time) ? globalThis.String(object.withdraw_time) : "",
    };
  },

  toJSON(message: OrderCreateRequest): unknown {
    const obj: any = {};
    if (message.customer_id !== 0) {
      obj.customer_id = Math.round(message.customer_id);
    }
    if (message.vendor_id !== "") {
      obj.vendor_id = message.vendor_id;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.total_value !== "") {
      obj.total_value = message.total_value;
    }
    if (message.withdraw_day !== "") {
      obj.withdraw_day = message.withdraw_day;
    }
    if (message.withdraw_time !== "") {
      obj.withdraw_time = message.withdraw_time;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateRequest>, I>>(base?: I): OrderCreateRequest {
    return OrderCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateRequest>, I>>(object: I): OrderCreateRequest {
    const message = createBaseOrderCreateRequest();
    message.customer_id = object.customer_id ?? 0;
    message.vendor_id = object.vendor_id ?? "";
    message.host = object.host ?? "";
    message.quantity = object.quantity ?? 0;
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.total_value = object.total_value ?? "";
    message.withdraw_day = object.withdraw_day ?? "";
    message.withdraw_time = object.withdraw_time ?? "";
    return message;
  },
};

function createBaseOrderCreateResponse(): OrderCreateResponse {
  return { status: false, message: "" };
}

export const OrderCreateResponse = {
  encode(message: OrderCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== false) {
      writer.uint32(8).bool(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateResponse {
    return {
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: OrderCreateResponse): unknown {
    const obj: any = {};
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateResponse>, I>>(base?: I): OrderCreateResponse {
    return OrderCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateResponse>, I>>(object: I): OrderCreateResponse {
    const message = createBaseOrderCreateResponse();
    message.status = object.status ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseOrderListRequest(): OrderListRequest {
  return { customer_id: "" };
}

export const OrderListRequest = {
  encode(message: OrderListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer_id !== "") {
      writer.uint32(10).string(message.customer_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customer_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderListRequest {
    return { customer_id: isSet(object.customer_id) ? globalThis.String(object.customer_id) : "" };
  },

  toJSON(message: OrderListRequest): unknown {
    const obj: any = {};
    if (message.customer_id !== "") {
      obj.customer_id = message.customer_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderListRequest>, I>>(base?: I): OrderListRequest {
    return OrderListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderListRequest>, I>>(object: I): OrderListRequest {
    const message = createBaseOrderListRequest();
    message.customer_id = object.customer_id ?? "";
    return message;
  },
};

function createBaseOrderListResponse(): OrderListResponse {
  return { orders: [] };
}

export const OrderListResponse = {
  encode(message: OrderListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      OrderResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orders.push(OrderResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderListResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => OrderResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: OrderListResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => OrderResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderListResponse>, I>>(base?: I): OrderListResponse {
    return OrderListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderListResponse>, I>>(object: I): OrderListResponse {
    const message = createBaseOrderListResponse();
    message.orders = object.orders?.map((e) => OrderResponse.fromPartial(e)) || [];
    return message;
  },
};

export type OrderService = typeof OrderService;
export const OrderService = {
  create: {
    path: "/order.Order/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OrderCreateRequest) => Buffer.from(OrderCreateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OrderCreateRequest.decode(value),
    responseSerialize: (value: OrderCreateResponse) => Buffer.from(OrderCreateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OrderCreateResponse.decode(value),
  },
  list: {
    path: "/order.Order/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OrderListRequest) => Buffer.from(OrderListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OrderListRequest.decode(value),
    responseSerialize: (value: OrderListResponse) => Buffer.from(OrderListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OrderListResponse.decode(value),
  },
} as const;

export interface OrderServer extends UntypedServiceImplementation {
  create: handleUnaryCall<OrderCreateRequest, OrderCreateResponse>;
  list: handleUnaryCall<OrderListRequest, OrderListResponse>;
}

export interface OrderClient extends Client {
  create(
    request: OrderCreateRequest,
    callback: (error: ServiceError | null, response: OrderCreateResponse) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OrderCreateResponse) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OrderCreateResponse) => void,
  ): ClientUnaryCall;
  list(
    request: OrderListRequest,
    callback: (error: ServiceError | null, response: OrderListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: OrderListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OrderListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: OrderListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OrderListResponse) => void,
  ): ClientUnaryCall;
}

export const OrderClient = makeGenericClientConstructor(OrderService, "order.Order") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OrderClient;
  service: typeof OrderService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
